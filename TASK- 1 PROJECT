{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMQqE078fpeIKLf1ZuA+sph",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/praisyprincy005/Project---Harshica-K-S/blob/main/TASK-%201%20PROJECT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GIAVsEX7JQD_",
        "outputId": "5b2f9cea-cbab-4bfd-ae83-0ebfedc1b7b3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.environ['KAGGLE_CONFIG_DIR']= '/content/gdrive/MyDrive/car prediction dataset'"
      ],
      "metadata": {
        "id": "ieGhdcsPJj3e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%cd /content/gdrive/MyDrive/car prediction dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hn-CShi2JwKJ",
        "outputId": "6df25071-d9e8-431f-ced3-dde2998bce7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/gdrive/MyDrive/car prediction dataset\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HYTEN6o0J1ZR",
        "outputId": "80de5211-4fa4-4684-93c9-ec3ddf6d2039"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " car    car-prediction\t\t 'Data Dictionary - carprices.xlsx'\n",
            " car-   CarPrice_Assignment.csv   prediction\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from openpyxl import Workbook,load_workbook\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import r2_score,mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "VMMxHQ-JJ5MD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "bRH54Kp4KNZ1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/gdrive/MyDrive/car prediction dataset/CarPrice_Assignment.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "id": "rlSEp7mUJ9um",
        "outputId": "b5f6a701-7973-42c7-bb39-39505f662fe9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   car_ID  symboling                   CarName fueltype aspiration doornumber  \\\n",
              "0       1          3        alfa-romero giulia      gas        std        two   \n",
              "1       2          3       alfa-romero stelvio      gas        std        two   \n",
              "2       3          1  alfa-romero Quadrifoglio      gas        std        two   \n",
              "3       4          2               audi 100 ls      gas        std       four   \n",
              "4       5          2                audi 100ls      gas        std       four   \n",
              "\n",
              "       carbody drivewheel enginelocation  wheelbase  ...  enginesize  \\\n",
              "0  convertible        rwd          front       88.6  ...         130   \n",
              "1  convertible        rwd          front       88.6  ...         130   \n",
              "2    hatchback        rwd          front       94.5  ...         152   \n",
              "3        sedan        fwd          front       99.8  ...         109   \n",
              "4        sedan        4wd          front       99.4  ...         136   \n",
              "\n",
              "   fuelsystem  boreratio  stroke compressionratio horsepower  peakrpm citympg  \\\n",
              "0        mpfi       3.47    2.68              9.0        111     5000      21   \n",
              "1        mpfi       3.47    2.68              9.0        111     5000      21   \n",
              "2        mpfi       2.68    3.47              9.0        154     5000      19   \n",
              "3        mpfi       3.19    3.40             10.0        102     5500      24   \n",
              "4        mpfi       3.19    3.40              8.0        115     5500      18   \n",
              "\n",
              "   highwaympg    price  \n",
              "0          27  13495.0  \n",
              "1          27  16500.0  \n",
              "2          26  16500.0  \n",
              "3          30  13950.0  \n",
              "4          22  17450.0  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e73d21a0-df25-4344-a15f-1f3f44802ef7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>car_ID</th>\n",
              "      <th>symboling</th>\n",
              "      <th>CarName</th>\n",
              "      <th>fueltype</th>\n",
              "      <th>aspiration</th>\n",
              "      <th>doornumber</th>\n",
              "      <th>carbody</th>\n",
              "      <th>drivewheel</th>\n",
              "      <th>enginelocation</th>\n",
              "      <th>wheelbase</th>\n",
              "      <th>...</th>\n",
              "      <th>enginesize</th>\n",
              "      <th>fuelsystem</th>\n",
              "      <th>boreratio</th>\n",
              "      <th>stroke</th>\n",
              "      <th>compressionratio</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>peakrpm</th>\n",
              "      <th>citympg</th>\n",
              "      <th>highwaympg</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>alfa-romero giulia</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>130</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>13495.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>alfa-romero stelvio</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>130</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>16500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>alfa-romero Quadrifoglio</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>hatchback</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>94.5</td>\n",
              "      <td>...</td>\n",
              "      <td>152</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>2.68</td>\n",
              "      <td>3.47</td>\n",
              "      <td>9.0</td>\n",
              "      <td>154</td>\n",
              "      <td>5000</td>\n",
              "      <td>19</td>\n",
              "      <td>26</td>\n",
              "      <td>16500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>audi 100 ls</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>fwd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.8</td>\n",
              "      <td>...</td>\n",
              "      <td>109</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>10.0</td>\n",
              "      <td>102</td>\n",
              "      <td>5500</td>\n",
              "      <td>24</td>\n",
              "      <td>30</td>\n",
              "      <td>13950.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>audi 100ls</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>4wd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.4</td>\n",
              "      <td>...</td>\n",
              "      <td>136</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>8.0</td>\n",
              "      <td>115</td>\n",
              "      <td>5500</td>\n",
              "      <td>18</td>\n",
              "      <td>22</td>\n",
              "      <td>17450.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e73d21a0-df25-4344-a15f-1f3f44802ef7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e73d21a0-df25-4344-a15f-1f3f44802ef7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e73d21a0-df25-4344-a15f-1f3f44802ef7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-37522752-1c0e-4809-bc9c-cb91aeac3dc0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37522752-1c0e-4809-bc9c-cb91aeac3dc0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-37522752-1c0e-4809-bc9c-cb91aeac3dc0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mmlyb0KkKRdh",
        "outputId": "406e6321-d75a-48eb-de18-3bb3cfc512f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(205, 26)"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KyufUmQ7KV_j",
        "outputId": "9f5b78dd-44c7-4e62-b9ec-707ab699f2d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 205 entries, 0 to 204\n",
            "Data columns (total 26 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   car_ID            205 non-null    int64  \n",
            " 1   symboling         205 non-null    int64  \n",
            " 2   CarName           205 non-null    object \n",
            " 3   fueltype          205 non-null    object \n",
            " 4   aspiration        205 non-null    object \n",
            " 5   doornumber        205 non-null    object \n",
            " 6   carbody           205 non-null    object \n",
            " 7   drivewheel        205 non-null    object \n",
            " 8   enginelocation    205 non-null    object \n",
            " 9   wheelbase         205 non-null    float64\n",
            " 10  carlength         205 non-null    float64\n",
            " 11  carwidth          205 non-null    float64\n",
            " 12  carheight         205 non-null    float64\n",
            " 13  curbweight        205 non-null    int64  \n",
            " 14  enginetype        205 non-null    object \n",
            " 15  cylindernumber    205 non-null    object \n",
            " 16  enginesize        205 non-null    int64  \n",
            " 17  fuelsystem        205 non-null    object \n",
            " 18  boreratio         205 non-null    float64\n",
            " 19  stroke            205 non-null    float64\n",
            " 20  compressionratio  205 non-null    float64\n",
            " 21  horsepower        205 non-null    int64  \n",
            " 22  peakrpm           205 non-null    int64  \n",
            " 23  citympg           205 non-null    int64  \n",
            " 24  highwaympg        205 non-null    int64  \n",
            " 25  price             205 non-null    float64\n",
            "dtypes: float64(8), int64(8), object(10)\n",
            "memory usage: 41.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "OAodavuxKZYW",
        "outputId": "96403657-6d08-4248-b344-1ba6b672d621"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           car_ID   symboling   wheelbase   carlength    carwidth   carheight  \\\n",
              "count  205.000000  205.000000  205.000000  205.000000  205.000000  205.000000   \n",
              "mean   103.000000    0.834146   98.756585  174.049268   65.907805   53.724878   \n",
              "std     59.322565    1.245307    6.021776   12.337289    2.145204    2.443522   \n",
              "min      1.000000   -2.000000   86.600000  141.100000   60.300000   47.800000   \n",
              "25%     52.000000    0.000000   94.500000  166.300000   64.100000   52.000000   \n",
              "50%    103.000000    1.000000   97.000000  173.200000   65.500000   54.100000   \n",
              "75%    154.000000    2.000000  102.400000  183.100000   66.900000   55.500000   \n",
              "max    205.000000    3.000000  120.900000  208.100000   72.300000   59.800000   \n",
              "\n",
              "        curbweight  enginesize   boreratio      stroke  compressionratio  \\\n",
              "count   205.000000  205.000000  205.000000  205.000000        205.000000   \n",
              "mean   2555.565854  126.907317    3.329756    3.255415         10.142537   \n",
              "std     520.680204   41.642693    0.270844    0.313597          3.972040   \n",
              "min    1488.000000   61.000000    2.540000    2.070000          7.000000   \n",
              "25%    2145.000000   97.000000    3.150000    3.110000          8.600000   \n",
              "50%    2414.000000  120.000000    3.310000    3.290000          9.000000   \n",
              "75%    2935.000000  141.000000    3.580000    3.410000          9.400000   \n",
              "max    4066.000000  326.000000    3.940000    4.170000         23.000000   \n",
              "\n",
              "       horsepower      peakrpm     citympg  highwaympg         price  \n",
              "count  205.000000   205.000000  205.000000  205.000000    205.000000  \n",
              "mean   104.117073  5125.121951   25.219512   30.751220  13276.710571  \n",
              "std     39.544167   476.985643    6.542142    6.886443   7988.852332  \n",
              "min     48.000000  4150.000000   13.000000   16.000000   5118.000000  \n",
              "25%     70.000000  4800.000000   19.000000   25.000000   7788.000000  \n",
              "50%     95.000000  5200.000000   24.000000   30.000000  10295.000000  \n",
              "75%    116.000000  5500.000000   30.000000   34.000000  16503.000000  \n",
              "max    288.000000  6600.000000   49.000000   54.000000  45400.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c4b8d50-8b49-41e2-b752-90ef28306f58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>car_ID</th>\n",
              "      <th>symboling</th>\n",
              "      <th>wheelbase</th>\n",
              "      <th>carlength</th>\n",
              "      <th>carwidth</th>\n",
              "      <th>carheight</th>\n",
              "      <th>curbweight</th>\n",
              "      <th>enginesize</th>\n",
              "      <th>boreratio</th>\n",
              "      <th>stroke</th>\n",
              "      <th>compressionratio</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>peakrpm</th>\n",
              "      <th>citympg</th>\n",
              "      <th>highwaympg</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>205.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>103.000000</td>\n",
              "      <td>0.834146</td>\n",
              "      <td>98.756585</td>\n",
              "      <td>174.049268</td>\n",
              "      <td>65.907805</td>\n",
              "      <td>53.724878</td>\n",
              "      <td>2555.565854</td>\n",
              "      <td>126.907317</td>\n",
              "      <td>3.329756</td>\n",
              "      <td>3.255415</td>\n",
              "      <td>10.142537</td>\n",
              "      <td>104.117073</td>\n",
              "      <td>5125.121951</td>\n",
              "      <td>25.219512</td>\n",
              "      <td>30.751220</td>\n",
              "      <td>13276.710571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>59.322565</td>\n",
              "      <td>1.245307</td>\n",
              "      <td>6.021776</td>\n",
              "      <td>12.337289</td>\n",
              "      <td>2.145204</td>\n",
              "      <td>2.443522</td>\n",
              "      <td>520.680204</td>\n",
              "      <td>41.642693</td>\n",
              "      <td>0.270844</td>\n",
              "      <td>0.313597</td>\n",
              "      <td>3.972040</td>\n",
              "      <td>39.544167</td>\n",
              "      <td>476.985643</td>\n",
              "      <td>6.542142</td>\n",
              "      <td>6.886443</td>\n",
              "      <td>7988.852332</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>86.600000</td>\n",
              "      <td>141.100000</td>\n",
              "      <td>60.300000</td>\n",
              "      <td>47.800000</td>\n",
              "      <td>1488.000000</td>\n",
              "      <td>61.000000</td>\n",
              "      <td>2.540000</td>\n",
              "      <td>2.070000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>4150.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>5118.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>52.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.500000</td>\n",
              "      <td>166.300000</td>\n",
              "      <td>64.100000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>2145.000000</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>3.150000</td>\n",
              "      <td>3.110000</td>\n",
              "      <td>8.600000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>4800.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>7788.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>103.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>173.200000</td>\n",
              "      <td>65.500000</td>\n",
              "      <td>54.100000</td>\n",
              "      <td>2414.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>3.310000</td>\n",
              "      <td>3.290000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>5200.000000</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>10295.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>154.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>102.400000</td>\n",
              "      <td>183.100000</td>\n",
              "      <td>66.900000</td>\n",
              "      <td>55.500000</td>\n",
              "      <td>2935.000000</td>\n",
              "      <td>141.000000</td>\n",
              "      <td>3.580000</td>\n",
              "      <td>3.410000</td>\n",
              "      <td>9.400000</td>\n",
              "      <td>116.000000</td>\n",
              "      <td>5500.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>16503.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>205.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>120.900000</td>\n",
              "      <td>208.100000</td>\n",
              "      <td>72.300000</td>\n",
              "      <td>59.800000</td>\n",
              "      <td>4066.000000</td>\n",
              "      <td>326.000000</td>\n",
              "      <td>3.940000</td>\n",
              "      <td>4.170000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>288.000000</td>\n",
              "      <td>6600.000000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>45400.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c4b8d50-8b49-41e2-b752-90ef28306f58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c4b8d50-8b49-41e2-b752-90ef28306f58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c4b8d50-8b49-41e2-b752-90ef28306f58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-707172d5-773e-4fe9-a70e-45a9d0c1201d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-707172d5-773e-4fe9-a70e-45a9d0c1201d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-707172d5-773e-4fe9-a70e-45a9d0c1201d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"car_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73.5784597496485,\n        \"min\": 1.0,\n        \"max\": 205.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          205.0,\n          103.0,\n          154.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"symboling\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 72.18619738012798,\n        \"min\": -2.0,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8341463414634146,\n          1.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wheelbase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.121837757672914,\n        \"min\": 6.021775685025571,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          98.75658536585367,\n          97.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carlength\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.57530527897739,\n        \"min\": 12.33728852655518,\n        \"max\": 208.1,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          174.04926829268288,\n          173.2,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.05631291349402,\n        \"min\": 2.145203852687183,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          65.90780487804878,\n          65.5,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carheight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58.95269696202711,\n        \"min\": 2.4435219699049036,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53.72487804878049,\n          54.1,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"curbweight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1270.6950351955225,\n        \"min\": 205.0,\n        \"max\": 4066.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2555.5658536585365,\n          2414.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"enginesize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 90.36221973782494,\n        \"min\": 41.64269343817984,\n        \"max\": 326.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          126.90731707317073,\n          120.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"boreratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.4711932729593,\n        \"min\": 0.27084370542622926,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.329756097560975,\n          3.31,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.49703452223628,\n        \"min\": 0.31359701376080407,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.255414634146341,\n          3.29,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"compressionratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 69.1117735526214,\n        \"min\": 3.972040321863298,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.142536585365855,\n          9.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horsepower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84.93308479898393,\n        \"min\": 39.54416680936116,\n        \"max\": 288.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          104.1170731707317,\n          95.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"peakrpm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2366.1797693049857,\n        \"min\": 205.0,\n        \"max\": 6600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5125.121951219512,\n          5200.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citympg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65.28506994468987,\n        \"min\": 6.542141653001622,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.21951219512195,\n          24.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"highwaympg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64.0390049599267,\n        \"min\": 6.886443130941824,\n        \"max\": 205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          30.75121951219512,\n          30.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13870.372072080632,\n        \"min\": 205.0,\n        \"max\": 45400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13276.710570731706,\n          10295.0,\n          205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YHaUMjElKdb3",
        "outputId": "fddc10c3-eff8-4ee1-c7e3-14313423fa7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "car_ID              0\n",
              "symboling           0\n",
              "CarName             0\n",
              "fueltype            0\n",
              "aspiration          0\n",
              "doornumber          0\n",
              "carbody             0\n",
              "drivewheel          0\n",
              "enginelocation      0\n",
              "wheelbase           0\n",
              "carlength           0\n",
              "carwidth            0\n",
              "carheight           0\n",
              "curbweight          0\n",
              "enginetype          0\n",
              "cylindernumber      0\n",
              "enginesize          0\n",
              "fuelsystem          0\n",
              "boreratio           0\n",
              "stroke              0\n",
              "compressionratio    0\n",
              "horsepower          0\n",
              "peakrpm             0\n",
              "citympg             0\n",
              "highwaympg          0\n",
              "price               0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum(axis = 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vlaiK5m1KhHi",
        "outputId": "926a8288-62d3-44fc-d4da-4eaea861a612"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      0\n",
              "1      0\n",
              "2      0\n",
              "3      0\n",
              "4      0\n",
              "      ..\n",
              "200    0\n",
              "201    0\n",
              "202    0\n",
              "203    0\n",
              "204    0\n",
              "Length: 205, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.CarName.unique() # DATA PREPARATION"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mIRa12VGKkiq",
        "outputId": "85cefc7d-a732-45cc-d960-1723e0fc7f15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['alfa-romero giulia', 'alfa-romero stelvio',\n",
              "       'alfa-romero Quadrifoglio', 'audi 100 ls', 'audi 100ls',\n",
              "       'audi fox', 'audi 5000', 'audi 4000', 'audi 5000s (diesel)',\n",
              "       'bmw 320i', 'bmw x1', 'bmw x3', 'bmw z4', 'bmw x4', 'bmw x5',\n",
              "       'chevrolet impala', 'chevrolet monte carlo', 'chevrolet vega 2300',\n",
              "       'dodge rampage', 'dodge challenger se', 'dodge d200',\n",
              "       'dodge monaco (sw)', 'dodge colt hardtop', 'dodge colt (sw)',\n",
              "       'dodge coronet custom', 'dodge dart custom',\n",
              "       'dodge coronet custom (sw)', 'honda civic', 'honda civic cvcc',\n",
              "       'honda accord cvcc', 'honda accord lx', 'honda civic 1500 gl',\n",
              "       'honda accord', 'honda civic 1300', 'honda prelude',\n",
              "       'honda civic (auto)', 'isuzu MU-X', 'isuzu D-Max ',\n",
              "       'isuzu D-Max V-Cross', 'jaguar xj', 'jaguar xf', 'jaguar xk',\n",
              "       'maxda rx3', 'maxda glc deluxe', 'mazda rx2 coupe', 'mazda rx-4',\n",
              "       'mazda glc deluxe', 'mazda 626', 'mazda glc', 'mazda rx-7 gs',\n",
              "       'mazda glc 4', 'mazda glc custom l', 'mazda glc custom',\n",
              "       'buick electra 225 custom', 'buick century luxus (sw)',\n",
              "       'buick century', 'buick skyhawk', 'buick opel isuzu deluxe',\n",
              "       'buick skylark', 'buick century special',\n",
              "       'buick regal sport coupe (turbo)', 'mercury cougar',\n",
              "       'mitsubishi mirage', 'mitsubishi lancer', 'mitsubishi outlander',\n",
              "       'mitsubishi g4', 'mitsubishi mirage g4', 'mitsubishi montero',\n",
              "       'mitsubishi pajero', 'Nissan versa', 'nissan gt-r', 'nissan rogue',\n",
              "       'nissan latio', 'nissan titan', 'nissan leaf', 'nissan juke',\n",
              "       'nissan note', 'nissan clipper', 'nissan nv200', 'nissan dayz',\n",
              "       'nissan fuga', 'nissan otti', 'nissan teana', 'nissan kicks',\n",
              "       'peugeot 504', 'peugeot 304', 'peugeot 504 (sw)', 'peugeot 604sl',\n",
              "       'peugeot 505s turbo diesel', 'plymouth fury iii',\n",
              "       'plymouth cricket', 'plymouth satellite custom (sw)',\n",
              "       'plymouth fury gran sedan', 'plymouth valiant', 'plymouth duster',\n",
              "       'porsche macan', 'porcshce panamera', 'porsche cayenne',\n",
              "       'porsche boxter', 'renault 12tl', 'renault 5 gtl', 'saab 99e',\n",
              "       'saab 99le', 'saab 99gle', 'subaru', 'subaru dl', 'subaru brz',\n",
              "       'subaru baja', 'subaru r1', 'subaru r2', 'subaru trezia',\n",
              "       'subaru tribeca', 'toyota corona mark ii', 'toyota corona',\n",
              "       'toyota corolla 1200', 'toyota corona hardtop',\n",
              "       'toyota corolla 1600 (sw)', 'toyota carina', 'toyota mark ii',\n",
              "       'toyota corolla', 'toyota corolla liftback',\n",
              "       'toyota celica gt liftback', 'toyota corolla tercel',\n",
              "       'toyota corona liftback', 'toyota starlet', 'toyota tercel',\n",
              "       'toyota cressida', 'toyota celica gt', 'toyouta tercel',\n",
              "       'vokswagen rabbit', 'volkswagen 1131 deluxe sedan',\n",
              "       'volkswagen model 111', 'volkswagen type 3', 'volkswagen 411 (sw)',\n",
              "       'volkswagen super beetle', 'volkswagen dasher', 'vw dasher',\n",
              "       'vw rabbit', 'volkswagen rabbit', 'volkswagen rabbit custom',\n",
              "       'volvo 145e (sw)', 'volvo 144ea', 'volvo 244dl', 'volvo 245',\n",
              "       'volvo 264gl', 'volvo diesel', 'volvo 246'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "carcompany = []\n",
        "for model in df['CarName']:\n",
        "    carcompany.append(str(model.split(' ')[0]))\n",
        "\n",
        "df['carcompany'] = np.array(carcompany)"
      ],
      "metadata": {
        "id": "daS6xWhPKpRG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "with plt.style.context('ggplot'):\n",
        "    plt.figure(figsize=(15,7))\n",
        "    median_prices = df.groupby('carcompany')['price'].median().sort_values(ascending=False)[:10]\n",
        "    median_prices.plot(kind='bar')\n",
        "    plt.ylabel('Median Price')\n",
        "    plt.title('Median Price of Cars by Company')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 704
        },
        "id": "IA1PayDjLyzU",
        "outputId": "f0793193-8896-4e29-cd64-b4267001e75d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABOsAAAK4CAYAAAAlVnknAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACQwUlEQVR4nOzdeXgNd///8dfJniA5thAiiZTYCVXUUqFaWtpqaaN6t+66aZVqdf1qq7XUrqui3GK9u6BK7UtLaZUu2lpiCyIkiAgSjS3b+f3hyvk5TWgSkTOZPB/X5XJm5nNm3mfeCfHymRmLzWazCQAAAAAAAIDTuTi7AAAAAAAAAABXEdYBAAAAAAAABkFYBwAAAAAAABgEYR0AAAAAAABgEIR1AAAAAAAAgEEQ1gEAAAAAAAAGQVgHAAAAAAAAGARhHQAAAAAAAGAQhHUAAAAAAACAQRDWAQCAWyIuLk4Wi0X//ve/Hdb/+9//lsViUVxcnFPqKg5m+IyTJ09W/fr15e3tLYvFoo8++sjZJRWb633tAgAAFAfCOgAATMJischiscjFxUWHDx++7rgOHTrYx86dO7f4CjSwESNG2M9Jzi9vb2+FhYVp0KBBSkhIcHaJxWrBggV68cUX5eXlpSFDhmj48OFq1apVvt6bnp6uWbNmqWvXrgoICJCnp6fKlSun8PBwDRkyRLt27brF1ZvH/v37NXjwYDVs2FB+fn7y8PBQtWrV1LVrV82aNUtXrlxxdokAAOAWcHN2AQAAoOi4ubkpMzNTs2bN0tixY3NtP3jwoDZt2mQf5wzjxo3T0KFDVb16dacc/0bat2+viIgISVJycrLWr1+vadOmadGiRfr5559122235Ws/Rv6M+bFy5Ur779WqVcv3+2JiYtS9e3ft27dPlSpV0j333KOgoCClp6dr7969mj59uiZPnqxvvvlGDz744K0q3xRGjRqlkSNHKjs7W3feeaf69OmjsmXL6tSpU9q0aZP69eunTz/9VNu3b3d2qQAAoIgR1gEAYCJVqlRRQECA5syZo1GjRsnNzfGv+qioKEnSAw88oKVLlzqjRAUEBCggIMApx/4nERERGjFihH05IyND9913nzZs2KDRo0drzpw5+dqPkT9jfpw4cUKSChTUnTp1SnfffbcSEhI0ZMgQjR07Vt7e3g5jkpKSNHLkSJ07d65I6zWbsWPHavjw4apRo4a++uortWzZMteYlStX6v3333dCdQAA4FbjMlgAAEymf//+SkxMtM+OypGRkaG5c+eqdevWql+//nXff/bsWb3xxhuqV6+evL295efnp7vvvlvr16/Pc/xff/2ll19+WYGBgfLy8lLdunX1wQcfKDs7O8/x17uf29y5c9WjRw+FhobK29tbvr6+atOmjT777LM89xMRESGLxaLMzEyNHTtWtWvXlqenp2rUqKH/+7//U3p6+g3OUv64u7vrmWeekST9+uuv9vUWi0URERFKTExUv379VL16dbm6utovK77RPet+/fVXRUZGqnr16vL09FRAQIDuvfdeLVq0KNfYX375RT179lTVqlXl4eGhGjVq6Nlnn7WHafl15coVjR8/Xo0aNZKPj498fX3Vrl27XMfMuRz4+++/t3/OnF//ZNiwYUpISNDjjz+uDz/8MFdQJ0n+/v6aOnWqevXqZV8XExOjoUOHqnnz5qpcubI8PT0VHBysZ555Js/Ljzdt2iSLxaIRI0bo119/VdeuXVWhQgWH871r1y49/vjjCgkJkaenpypXrqxmzZppyJAhysjIKMip0/79+9W9e3dVqFBBZcqUUdu2bXN9L8yYMUMWi0UjR47Mcx+JiYlyd3dXo0aN/vF4cXFxGjFihNzd3bV69eo8gzpJ6tatm9auXZtr/aJFi3TXXXfJz89P3t7eatSokcaNG5fnJbMhISEKCQlRWlqaXnrpJdWoUUPe3t4KDw/XN998I0nKzMzUmDFjVLt2bXl5eem2227TlClTcu3r2r5s27ZNnTp1kp+fn8qVK6fOnTvnOQPwxIkTGjVqlNq0aWP/Gq9WrZp69+6tvXv35nlucu4lGBcXp169eqlSpUry8vJS8+bNc/2ZV5R9AQCgOBHWAQBgMo8//rjKlCljn0WXY/ny5UpKSlL//v2v+96jR4/q9ttv1/jx41W5cmUNGDBAkZGR2rdvn7p06aKZM2c6jL9y5Yruvvtuffjhh6pUqZJefPFFtW/fXu+++65eeumlAtX93HPP6ejRo7rrrrs0ZMgQ9erVS0ePHtWTTz6pt99++7rv6927tz755BO1a9dOzz33nLy9vTVx4kQ9++yzBTr+9dhsNknKFVidPXtWrVq10s8//6xHHnlEzz//vKpUqXLDfc2cOVOtW7fWN998o9atW+uVV15R165dlZSUpGnTpjmMnT17ttq0aaM1a9aoQ4cOGjJkiJo3b66oqCg1b95cx44dy1f96enp6ty5s9544w1lZmZq0KBBevLJJxUTE6PIyEi9+eab9rEREREaPny4goODJUnDhw+3/7qRS5cu6X//+5/9Pf/E09PT/nrJkiWaPn26atSooccff1yDBw9W/fr1FRUVpTvuuEPHjx/Pcx/btm1Tu3btdPnyZfXt21d9+vSRh4eHdu3apZYtW2rZsmVq1aqVXn75ZT322GOqXLmypk2bVqD7vB05ckR33nmnzp49q2effVaPPvqofv/9d913331auHChfdwTTzwhX19fzZo1S1lZWbn2M3v2bGVmZubra3LOnDnKyMhQjx491LBhwxuOvfY8StKbb75p/37t3bu3nn/+edlsNr355pvq3LlzngF2RkaG7rnnHq1evVoPPfSQnnzySR0+fFg9evTQhg0bFBkZqU8//VQRERHq16+f0tLSNHjwYIfPf61ffvlFERER8vT01KBBg+wzU9u1a6cff/zRYewPP/yg8ePHy2q1qkePHnrppZfUqlUrLV68WC1atNDOnTvzPMbRo0fVokULxcXF6cknn1RkZKSio6P10EMP2YNmqWj7AgBAsbIBAABTkGSrXr26zWaz2f7zn//YXF1dbfHx8fbtnTt3tvn6+touXLhge+utt2ySbHPmzHHYR/v27W0Wi8X25ZdfOqw/d+6crUmTJjYvLy9bYmKiff2YMWNskmyPPPKILSsry74+NjbWVr58eZskW58+fRz21adPH5sk25EjRxzWHzp0KNdnunLliq1jx442Nzc3W0JCQq5aJdmaNWtmO3PmjH19Wlqa7bbbbrO5uLjYTp48ef0Tdo3hw4fbJNmGDx/usD4jI8PWsWNHmyRb37597esl2STZnnzySVtGRkau/eX1Gffs2WNzc3OzlS9f3hYdHZ3rPdf26sCBAzZ3d3fbbbfdlutzf/fddzYXFxdb9+7d8/XZxo4da5Nku++++xxqPXXqlC04ONgmyfbTTz85vCfn3ObXDz/84PD1VxAJCQm2y5cv51q/bt06m4uLi23AgAEO67///nv7+Z8+fXqu97388ss2SbZvvvkm17azZ886fJ1ez5EjR+zHePXVVx22/fbbbzY3Nzeb1Wq1paam2tcPGjTIJsm2YsUKh/HZ2dm2mjVr2nx8fGwpKSn/eOycr7eZM2f+49hrbd261SbJVqNGDYev+4yMDFu3bt1skmxjxoxxeE9O/7t16+bQg5x+li9f3ta8eXPbuXPn7NsOHz5sc3d3t4WHhzvs69q+fPLJJw7bvvnmG5skW61atRzO/6lTp2znz5/P9Vl27NhhK1OmjK1Lly4O66/ty4gRIxy2rV271v51fq2i6gsAAMWJsA4AAJO4Niz5+eefbZJsI0eOtNlsNltcXJzNxcXF9txzz9lsNlueYd2OHTtskmw9e/bMc/85/+CeOnWqfV2tWrVsLi4ueQZtOQFYfsO66/n6669tkmzz5s1zWJ8TKH377be53vPOO+/k+Q/068mptX379rbhw4fbhg8fbnv++edttWvXtkmyVapUyXb48GH7eEk2Dw8P26lTp/LcX16f8fnnn7dJsn3wwQf/WM+QIUNskmwrV67Mc3v37t1trq6ueQYdf1erVi2bxWKx7du3L9e2qKgomyTb008/7bC+oGHdwoULbZJsLVu2zPd78qNRo0a2mjVrOqzLCYX+HhblyAnr1q1bV+jj5oRCfn5+eZ7jnP7OnTvXvi46OtoefF0rJ0T6+zm+nnr16tkk2dasWVOgmvv162eTZJsxY0aubQcOHLC5uLjkOpc5YV1e3781a9a0SbJt2LAh17aIiAibm5ubLTMz074upy9/D+Ry5HxNbdq0KV+f54EHHrB5enra0tPT7ety+hIcHOxw7BxBQUG2ihUrOqwrqr4AAFCceMAEAAAm1LJlSzVq1EizZ8/WsGHDFBUVpezs7BteArtt2zZJUmpqqsNDFnKcPn1akrRv3z5JV+9Vd+jQIdWoUSPPp6RGRERc915ReTl27JgmTJigDRs26NixY7p06ZLD9utdDtm8efNc62rUqCFJBX6QwebNm7V582ZJst8jbsCAAXrzzTft+8wREhIif3//fO/7559/liTdd999/zg2pxebN2/Wb7/9lmt7UlKSsrKyFBMTo9tvv/26+8npUfXq1VW3bt1c2zt27ChJ+vPPP/P1GW4Fm82mzz//XHPnztXOnTt17tw5h0sWPTw88nxfixYt8lwfGRmpjz/+WN27d1fPnj3VqVMntWnTJt9P8r1Ws2bNVK5cuVzrIyIiNG/ePP3555/q06ePJKlBgwa66667tGbNGsXHx9u/Xv773/9KkgYMGFDg4xfEH3/8Ien/9/RaYWFhCgwM1JEjR5Samio/Pz/7NqvVmue5qVatmo4cOZLn11f16tWVmZmpxMTEXE88bteunVxcct9pJyIiQps3b9aff/6p9u3b29evWrVK06dP1/bt25WcnJzrKdXJycm5HtYSHh4uV1fXXMeoUaOG/Xsnh7P7AgBAYRDWAQBgUv3799cLL7ygNWvWaM6cObr99tvVtGnT644/c+aMJOnbb7/Vt99+e91xaWlpkq6GepKue5+2qlWr5rvW2NhYtWjRQufOnVO7du107733ys/PT66uroqLi9O8efOue68xq9Waa13OU3Dzuk/VjQwfPjzPoDIvBfl8kpSSkiJJucKNvOT0YtKkSTccl9OL68np0fWeTJuzPqe2wsrZz/UC1Rt5+eWX9dFHHykgIECdO3dW9erV7Q+nmDt3ro4ePZrn+653/lu0aKEff/xRY8aM0eLFi+330qtTp46GDx+uxx9/PN+1/dPXds75zTFw4ED98MMPioqK0siRI5WYmKjly5crPDz8uuHi3wUEBGjfvn0FPpf56fWxY8eUkpLiENZd+/paOd9DeW3P2ZbXwzoKcs4+/vhjDRkyROXLl9c999yjoKAg+fj4yGKx6JtvvtHOnTvz/L7P63s+p668HmxTFH0BAKA4EdYBAGBSTz75pP7v//5PAwYM0PHjx/XOO+/ccHzOP8o//vhjvfDCC/+4/5zxp06dynN7YmJivmv94IMPdObMGc2ZM0f//ve/HbZ9+eWXmjdvXr73VVzy84TUa+UEDMePH89zltu1cs5tamqqfH19C1Xftfu5Xi9OnjzpMK6wmjdvLk9PTyUkJCgmJkZhYWH5el9SUpImT56shg0bauvWrblmsX355ZfXfe+Nzv+dd96plStX6sqVK/r999+1du1affLJJ+rdu7cqV66sTp065au+f/ra/vt5e+SRR1SlShXNmjVL77zzTqEeYNC2bVtt3LhRGzZs0H/+8598v+/aXuc1U66oev1P8nvOMjMzNWLECFWtWlV//PFHrpDx7zPkbkZR9AUAgOLE02ABADApq9Wqnj17KiEhQWXKlPnHGUWtWrWSpFxPbLyecuXKqVatWjp+/LgOHz6ca/umTZvyXeuhQ4ckST169Mi1Leey1JIu5/yuWbMm32Pz24vrKVeunG677TYdP35cBw8ezLU958mZzZo1u6njeHt768knn5QkjRo16h/H58yWio2NVXZ2tu69995cQV1CQoJiY2Nvqi5PT0+1bt1ao0aN0uTJkyVJy5Yty/f7//jjD/3111+51ud8bf99pqq7u7v69eun48ePa8WKFYqKilLZsmX1xBNP5PuYTz/9tNzd3fX1119r7969Nxx77ayznFry+r47dOiQEhISVLNmzevOSisqW7ZsyXN229/PWXJyslJSUtS6detcQV1aWpr9st6iUBR9AQCgOBHWAQBgYqNHj9bSpUu1bt26PO+9da3mzZurXbt2WrJkiWbPnp3nmN27dyspKcm+/PTTTys7O1v/93//5/AP9CNHjtjDkfwICQmRlDtoWLdunaKiovK9HyN77rnn5ObmpnfffTfPECYhIcH++vnnn5e7u7teeuklxcTE5Bqbnp6e7yCvb9++stlseu211xwuC05OTta7775rH3OzRo8ercDAQH3++ed67bXXct1zMOeYL7zwghYsWCDp//d9y5YtDrWlpaWpf//+ue5flh9bt27N89g5M758fHzyva/U1NRc4eP27dv1+eefy8/PTw8//HCu9zzzzDNydXXV888/ryNHjqh3797/+L13rZCQEI0YMULp6enq2rWrtm/fnue4tWvXOtz/MKeHo0ePtt9fUrp6Kfirr76q7OzsAs3UK6yDBw9q2rRpDuuWLVumzZs3q1atWmrXrp0kyd/fXz4+Pvr9998dLufOyMjQiy++qOTk5CKt62b7AgBAceIyWAAATCwoKEhBQUH5Hv/FF1+oY8eO+s9//qPJkyerZcuWslqtSkhI0K5duxQdHa1t27bZH6zwyiuv6JtvvtHXX3+tZs2aqXPnzkpJSdGiRYt01113afny5fk67sCBAzVnzhw9+uij6tmzp6pVq6bo6GitXbtWjz32mBYuXFioz28k9evX17Rp0zRgwAA1bdpUDz30kGrXrq0zZ87ot99+k6+vr32mW926dTV79mz17dtXDRo0UJcuXRQWFqaMjAwdO3ZMP/74oypXrqz9+/f/43FfffVVrVmzRsuWLVOTJk10//336+LFi/rqq6+UlJSk119/XW3btr3pz1elShVt2LBB3bt313vvvad58+bZ70OWnp6uffv2adOmTbpy5Yq++eYbSVfvY9arVy8tWLBA4eHhuvfee5Wamqpvv/1WXl5eCg8P144dOwpUx8SJE7Vx40a1a9dONWvWVNmyZbVnzx6tWbNG5cuX1zPPPJPvfd11112KiorSL7/8ojZt2ujkyZNauHChsrOzNWPGjDwvUQ4KClLXrl3tX/uFudTyzTffVGZmpkaOHKk77rhDrVu3VvPmzVW2bFmdOnVKP/zwgw4ePOjwcJXWrVvr9ddf18SJE9WwYUP17NlTZcqU0Zo1axQdHa22bdvqtddeK3AtBdWlSxe98sorWrNmjZo0aaJDhw5pyZIl8vLy0uzZs+0Pn3BxcdELL7yg8ePHq1GjRnrooYeUnp6u77//XmfPnlWHDh3s3w9FoSj6AgBAcWFmHQAAsAsMDNTvv/+uMWPGyNXVVZ9//rkmT56srVu3KigoSDNmzFCjRo3s4z09PfXdd9/ppZde0unTp/Xxxx9r8+bNGjZsmD788MN8H7dx48b6/vvv1bp1a61atUqffvqpzp8/ryVLlpjqaY39+/fXli1b1K1bN23atEmTJk3S8uXLVblyZQ0aNMhh7L/+9S/9/vvveuKJJ7Rr1y5NmTJFn332mQ4dOqSePXvmmr10PR4eHvr22281ZswYSdInn3yiefPmqXbt2vriiy80YcKEIvt8YWFh2rFjh6KiotS8eXNt3LhR77//vv773/8qPj5e/fr1044dO/TAAw/Y3zNr1iy9+eabunTpkqZOnap169apW7du2rp1a6HurzZw4ED16NFDR44c0f/+9z998skniomJ0cCBA/Xnn38W6KmwNWvW1NatW1W+fHlNnz5dixYtUrNmzbR69WpFRkZe9305s9yaN29e6EuM33nnHUVHR+v5559Xamqq5syZo0mTJmnVqlW67bbbFBUVpS1btji8Z8KECfryyy9Vu3ZtzZ8/X5MnT1Z2drZGjx6tb7/99rpP1i1KLVu2tIeyU6ZM0Zo1a9SxY0f98MMP9ll1Od599129//778vb21owZM7RkyRI1b95cv/76a4H+kyG/iqIvAAAUB4vNZrM5uwgAAADALEaMGKGRI0cqKiqqWC49NYJNmzapQ4cOBXqicnErjX0BAJRMzKwDAAAAishff/2l6dOnq0KFCv/4UBcUH/oCAChJuGcdAAAAcJNWrVqlP/74QytWrNCpU6f03nvvFehhFrg16AsAoCQirAMAAABu0ldffaV58+apSpUqeuONN/TSSy85uySIvgAASibuWQcAAAAAAAAYBPes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++23XPcz++2331SuXDknVYXCWrBggTZu3KgnnnhCderUkXQ1ZP/qq6+UkZHBn7clTGZmpipVqqSwsLDrBnXS1Z+DCeqMzc3NTUePHnV2GYZGWIcC8fT0tN+nzmq16tSpU/Ybd54/f96ZpeEmTJ06VR06dMgV1h08eFAbN27UiBEjnFMYCu3kyZPas2ePUlNT9fcJ1D179nRSVSiMixcvKjs7W2XLlnUIAtLS0uTi4sJ9eEqgX375xf5giYSEBJUtW1Z169bVk08+yT8uSpgZM2Zo69at+umnn7Rs2TIFBQWpXbt2atOmDZfalVCPPfaYpk+frj179qh27dqSrv48tHPnTvu9YFFybN68WQMGDHB44EtwcLAqVKigqKgowroSxs3NTb/88gs/y5pEu3bt7GE6ciOsQ4HUrl1b+/fvV2BgoJo2bar58+fr2LFj+uWXX+w3hUTJExcXl+dlPGFhYZo9e7YTKsLN+O677xQVFaVy5crJarU63LTeYrHwA04J89FHH+n2229X586dHdZv3bpVv//+OzfgLYFmzpypevXqqVOnTqpfv36ue+2g5PD19VWXLl3UpUsXJSUlacuWLdq8ebO++OIL1atXj3v5lkARERGqXr261qxZo19//VWSVL16dY0aNcoe3qHkSEtLU7Vq1XKtr169utLS0pxQEW7WHXfcoV9//VXdunVzdim4SdnZ2Vq/fr12796t0NDQXPfuLe0PrySsQ4H06dPHfr+Hxx57TJcvX9bWrVtVtWrVUv/NVNJdunQp17qcGT0oWZYsWaJevXqpe/fuzi4FReDgwYN66qmncq1v0KCBFixY4ISKcLOioqKcXQJuAX9/f3Xv3l3BwcFauHCh9u7d6+ySUEi1a9cmmDOJ4OBgrV27Vn379nVYv3btWoWEhDinKNyUgIAAff311zpw4ECeAc/999/vpMpQUPHx8QoNDZV09aogOCKsQ4FUqVLF/trLy0vPPPOME6tBUalXr56WLl2qIUOG2G+0m52draVLl3Lj7BLowoULuvPOO51dBopIZmZmnqF5VlaW/YETKJlSU1PzvFQ9ODjYSRWhsPbv368tW7bo559/VkZGhpo3b67evXs7uywUQnJy8g23V6pUqZgqQVH417/+pXHjxmn37t32q4BiYmJ05swZZqaXUBs3bpSPj49iY2MVGxvrsM1isRDWlSDM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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.CarName=df.CarName.astype('category').cat.codes\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "xDWJ39zFL2Ee",
        "outputId": "212a16d6-c1f1-45d9-a791-ad63db07dea4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   car_ID  symboling  CarName fueltype aspiration doornumber      carbody  \\\n",
              "0       1          3        2      gas        std        two  convertible   \n",
              "1       2          3        3      gas        std        two  convertible   \n",
              "2       3          1        1      gas        std        two    hatchback   \n",
              "3       4          2        4      gas        std       four        sedan   \n",
              "4       5          2        5      gas        std       four        sedan   \n",
              "\n",
              "  drivewheel enginelocation  wheelbase  ...  fuelsystem  boreratio  stroke  \\\n",
              "0        rwd          front       88.6  ...        mpfi       3.47    2.68   \n",
              "1        rwd          front       88.6  ...        mpfi       3.47    2.68   \n",
              "2        rwd          front       94.5  ...        mpfi       2.68    3.47   \n",
              "3        fwd          front       99.8  ...        mpfi       3.19    3.40   \n",
              "4        4wd          front       99.4  ...        mpfi       3.19    3.40   \n",
              "\n",
              "   compressionratio horsepower peakrpm  citympg highwaympg    price  \\\n",
              "0               9.0        111    5000       21         27  13495.0   \n",
              "1               9.0        111    5000       21         27  16500.0   \n",
              "2               9.0        154    5000       19         26  16500.0   \n",
              "3              10.0        102    5500       24         30  13950.0   \n",
              "4               8.0        115    5500       18         22  17450.0   \n",
              "\n",
              "    carcompany  \n",
              "0  alfa-romero  \n",
              "1  alfa-romero  \n",
              "2  alfa-romero  \n",
              "3         audi  \n",
              "4         audi  \n",
              "\n",
              "[5 rows x 27 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc376325-02ac-4125-8718-3d10266410f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>car_ID</th>\n",
              "      <th>symboling</th>\n",
              "      <th>CarName</th>\n",
              "      <th>fueltype</th>\n",
              "      <th>aspiration</th>\n",
              "      <th>doornumber</th>\n",
              "      <th>carbody</th>\n",
              "      <th>drivewheel</th>\n",
              "      <th>enginelocation</th>\n",
              "      <th>wheelbase</th>\n",
              "      <th>...</th>\n",
              "      <th>fuelsystem</th>\n",
              "      <th>boreratio</th>\n",
              "      <th>stroke</th>\n",
              "      <th>compressionratio</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>peakrpm</th>\n",
              "      <th>citympg</th>\n",
              "      <th>highwaympg</th>\n",
              "      <th>price</th>\n",
              "      <th>carcompany</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>13495.0</td>\n",
              "      <td>alfa-romero</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>16500.0</td>\n",
              "      <td>alfa-romero</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>hatchback</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>94.5</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>2.68</td>\n",
              "      <td>3.47</td>\n",
              "      <td>9.0</td>\n",
              "      <td>154</td>\n",
              "      <td>5000</td>\n",
              "      <td>19</td>\n",
              "      <td>26</td>\n",
              "      <td>16500.0</td>\n",
              "      <td>alfa-romero</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>fwd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.8</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>10.0</td>\n",
              "      <td>102</td>\n",
              "      <td>5500</td>\n",
              "      <td>24</td>\n",
              "      <td>30</td>\n",
              "      <td>13950.0</td>\n",
              "      <td>audi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>4wd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.4</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>8.0</td>\n",
              "      <td>115</td>\n",
              "      <td>5500</td>\n",
              "      <td>18</td>\n",
              "      <td>22</td>\n",
              "      <td>17450.0</td>\n",
              "      <td>audi</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc376325-02ac-4125-8718-3d10266410f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc376325-02ac-4125-8718-3d10266410f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc376325-02ac-4125-8718-3d10266410f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4a46ec69-487e-43f1-82c8-ad3a88da2a7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a46ec69-487e-43f1-82c8-ad3a88da2a7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4a46ec69-487e-43f1-82c8-ad3a88da2a7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.carcompany = df.carcompany.astype('category').cat.codes\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "e0GBD6ndL8Ha",
        "outputId": "00f39b33-7e26-4a21-899d-673480f2dceb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   car_ID  symboling  CarName fueltype aspiration doornumber      carbody  \\\n",
              "0       1          3        2      gas        std        two  convertible   \n",
              "1       2          3        3      gas        std        two  convertible   \n",
              "2       3          1        1      gas        std        two    hatchback   \n",
              "3       4          2        4      gas        std       four        sedan   \n",
              "4       5          2        5      gas        std       four        sedan   \n",
              "\n",
              "  drivewheel enginelocation  wheelbase  ...  fuelsystem  boreratio  stroke  \\\n",
              "0        rwd          front       88.6  ...        mpfi       3.47    2.68   \n",
              "1        rwd          front       88.6  ...        mpfi       3.47    2.68   \n",
              "2        rwd          front       94.5  ...        mpfi       2.68    3.47   \n",
              "3        fwd          front       99.8  ...        mpfi       3.19    3.40   \n",
              "4        4wd          front       99.4  ...        mpfi       3.19    3.40   \n",
              "\n",
              "   compressionratio horsepower peakrpm  citympg highwaympg    price  \\\n",
              "0               9.0        111    5000       21         27  13495.0   \n",
              "1               9.0        111    5000       21         27  16500.0   \n",
              "2               9.0        154    5000       19         26  16500.0   \n",
              "3              10.0        102    5500       24         30  13950.0   \n",
              "4               8.0        115    5500       18         22  17450.0   \n",
              "\n",
              "   carcompany  \n",
              "0           1  \n",
              "1           1  \n",
              "2           1  \n",
              "3           2  \n",
              "4           2  \n",
              "\n",
              "[5 rows x 27 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03453de5-9465-4130-bbee-3299ba7a6af9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>car_ID</th>\n",
              "      <th>symboling</th>\n",
              "      <th>CarName</th>\n",
              "      <th>fueltype</th>\n",
              "      <th>aspiration</th>\n",
              "      <th>doornumber</th>\n",
              "      <th>carbody</th>\n",
              "      <th>drivewheel</th>\n",
              "      <th>enginelocation</th>\n",
              "      <th>wheelbase</th>\n",
              "      <th>...</th>\n",
              "      <th>fuelsystem</th>\n",
              "      <th>boreratio</th>\n",
              "      <th>stroke</th>\n",
              "      <th>compressionratio</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>peakrpm</th>\n",
              "      <th>citympg</th>\n",
              "      <th>highwaympg</th>\n",
              "      <th>price</th>\n",
              "      <th>carcompany</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>13495.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>convertible</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>88.6</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.47</td>\n",
              "      <td>2.68</td>\n",
              "      <td>9.0</td>\n",
              "      <td>111</td>\n",
              "      <td>5000</td>\n",
              "      <td>21</td>\n",
              "      <td>27</td>\n",
              "      <td>16500.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>two</td>\n",
              "      <td>hatchback</td>\n",
              "      <td>rwd</td>\n",
              "      <td>front</td>\n",
              "      <td>94.5</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>2.68</td>\n",
              "      <td>3.47</td>\n",
              "      <td>9.0</td>\n",
              "      <td>154</td>\n",
              "      <td>5000</td>\n",
              "      <td>19</td>\n",
              "      <td>26</td>\n",
              "      <td>16500.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>fwd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.8</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>10.0</td>\n",
              "      <td>102</td>\n",
              "      <td>5500</td>\n",
              "      <td>24</td>\n",
              "      <td>30</td>\n",
              "      <td>13950.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>gas</td>\n",
              "      <td>std</td>\n",
              "      <td>four</td>\n",
              "      <td>sedan</td>\n",
              "      <td>4wd</td>\n",
              "      <td>front</td>\n",
              "      <td>99.4</td>\n",
              "      <td>...</td>\n",
              "      <td>mpfi</td>\n",
              "      <td>3.19</td>\n",
              "      <td>3.40</td>\n",
              "      <td>8.0</td>\n",
              "      <td>115</td>\n",
              "      <td>5500</td>\n",
              "      <td>18</td>\n",
              "      <td>22</td>\n",
              "      <td>17450.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03453de5-9465-4130-bbee-3299ba7a6af9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03453de5-9465-4130-bbee-3299ba7a6af9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03453de5-9465-4130-bbee-3299ba7a6af9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f58d1e45-0e96-4662-b391-fe61333606e9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f58d1e45-0e96-4662-b391-fe61333606e9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f58d1e45-0e96-4662-b391-fe61333606e9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with plt.style.context(('ggplot')):\n",
        "    sns.jointplot(x=df[\"doornumber\"],y=df[\"price\"],data=df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "fTEW6wHlL_p0",
        "outputId": "d6cadae4-8dc6-47d9-c275-6eae898f449a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with plt.style.context(('ggplot')):\n",
        "    plt.figure(figsize=(10,7))\n",
        "    plt.title(\"Types of Cars\")\n",
        "    sns.countplot(data=df,x=df['carbody'])\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "aAt4cGtoMDkt",
        "outputId": "b40160d7-f690-4e6c-c728-3233a0842b2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.fueltype = df.fueltype.astype('category').cat.codes\n",
        "df.aspiration = df.aspiration.astype('category').cat.codes\n",
        "df.doornumber = df.doornumber.astype('category').cat.codes\n",
        "df.carbody = df.carbody.astype('category').cat.codes\n",
        "df.drivewheel = df.drivewheel.astype('category').cat.codes\n",
        "df.enginelocation = df.enginelocation.astype('category').cat.codes\n",
        "df.enginetype = df.enginetype.astype('category').cat.codes\n",
        "df.cylindernumber = df.cylindernumber.astype('category').cat.codes\n",
        "df.fuelsystem = df.fuelsystem.astype('category').cat.codes"
      ],
      "metadata": {
        "id": "vBpIOCqnMHTf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(['car_ID'], axis = 1)"
      ],
      "metadata": {
        "id": "M1xeiHGUMLLY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eWaeluu4MOtn",
        "outputId": "17eb4140-a480-4e1c-d1f1-cb0f4c485180"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['symboling', 'CarName', 'fueltype', 'aspiration', 'doornumber',\n",
              "       'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength',\n",
              "       'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber',\n",
              "       'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio',\n",
              "       'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price',\n",
              "       'carcompany'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 914
        },
        "id": "Ub33Wl57MSDM",
        "outputId": "f7422905-e698-418d-d26b-a8e08c3ac6a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  symboling   CarName  fueltype  aspiration  doornumber  \\\n",
              "symboling          1.000000 -0.107095  0.194311   -0.059866    0.664073   \n",
              "CarName           -0.107095  1.000000 -0.069435    0.019914   -0.171745   \n",
              "fueltype           0.194311 -0.069435  1.000000   -0.401397    0.191491   \n",
              "aspiration        -0.059866  0.019914 -0.401397    1.000000   -0.031792   \n",
              "doornumber         0.664073 -0.171745  0.191491   -0.031792    1.000000   \n",
              "carbody           -0.596135  0.099691 -0.147853    0.063028   -0.680358   \n",
              "drivewheel        -0.041671 -0.016129 -0.132257    0.066465    0.098954   \n",
              "enginelocation     0.212471  0.055968  0.040070   -0.057191    0.137757   \n",
              "wheelbase         -0.531954  0.014550 -0.308346    0.257611   -0.447357   \n",
              "carlength         -0.357612  0.053016 -0.212679    0.234539   -0.398568   \n",
              "carwidth          -0.232919 -0.075349 -0.233880    0.300567   -0.207168   \n",
              "carheight         -0.541038  0.201900 -0.284631    0.087311   -0.552208   \n",
              "curbweight        -0.227691 -0.049407 -0.217275    0.324902   -0.197379   \n",
              "enginetype         0.050372 -0.090381  0.082695   -0.102963    0.062431   \n",
              "cylindernumber     0.197762  0.047154  0.110617   -0.133119    0.154322   \n",
              "enginesize        -0.105790 -0.153982 -0.069594    0.108217   -0.020742   \n",
              "fuelsystem         0.091163  0.123845  0.041529    0.288086    0.015519   \n",
              "boreratio         -0.130051  0.188598 -0.054451    0.212614   -0.119258   \n",
              "stroke            -0.008735 -0.181775 -0.241829    0.222982    0.011082   \n",
              "compressionratio  -0.178515  0.101730 -0.984356    0.295541   -0.177888   \n",
              "horsepower         0.070873 -0.092131  0.163926    0.241685    0.126947   \n",
              "peakrpm            0.273606 -0.138309  0.476883   -0.183383    0.247668   \n",
              "citympg           -0.035823  0.093437 -0.255963   -0.202362    0.012417   \n",
              "highwaympg         0.034606  0.102895 -0.191392   -0.254416    0.036330   \n",
              "price             -0.079978 -0.231439 -0.105679    0.177926   -0.031835   \n",
              "carcompany        -0.091524  0.995209 -0.063029    0.021522   -0.164705   \n",
              "\n",
              "                   carbody  drivewheel  enginelocation  wheelbase  carlength  \\\n",
              "symboling        -0.596135   -0.041671        0.212471  -0.531954  -0.357612   \n",
              "CarName           0.099691   -0.016129        0.055968   0.014550   0.053016   \n",
              "fueltype         -0.147853   -0.132257        0.040070  -0.308346  -0.212679   \n",
              "aspiration        0.063028    0.066465       -0.057191   0.257611   0.234539   \n",
              "doornumber       -0.680358    0.098954        0.137757  -0.447357  -0.398568   \n",
              "carbody           1.000000   -0.155745       -0.277009   0.401362   0.334433   \n",
              "drivewheel       -0.155745    1.000000        0.147865   0.459745   0.485649   \n",
              "enginelocation   -0.277009    0.147865        1.000000  -0.187790  -0.050989   \n",
              "wheelbase         0.401362    0.459745       -0.187790   1.000000   0.874587   \n",
              "carlength         0.334433    0.485649       -0.050989   0.874587   1.000000   \n",
              "carwidth          0.131710    0.470751       -0.051698   0.795144   0.841118   \n",
              "carheight         0.568534   -0.019719       -0.106234   0.589435   0.491029   \n",
              "curbweight        0.128467    0.575111        0.050468   0.776386   0.877728   \n",
              "enginetype       -0.037024   -0.116823        0.114127  -0.135577  -0.113291   \n",
              "cylindernumber   -0.048408    0.223238        0.135541  -0.184596  -0.109585   \n",
              "enginesize       -0.073352    0.524307        0.196826   0.569329   0.683360   \n",
              "fuelsystem       -0.065079    0.424686        0.105971   0.384601   0.557810   \n",
              "boreratio         0.010549    0.481827        0.185042   0.488750   0.606454   \n",
              "stroke           -0.015325    0.071591       -0.138455   0.160959   0.129533   \n",
              "compressionratio  0.136243    0.127479       -0.019762   0.249786   0.158414   \n",
              "horsepower       -0.153928    0.518686        0.317839   0.353294   0.552623   \n",
              "peakrpm          -0.109643   -0.039417        0.198461  -0.360469  -0.287242   \n",
              "citympg           0.031697   -0.449581       -0.153487  -0.470414  -0.670909   \n",
              "highwaympg       -0.007170   -0.452220       -0.102026  -0.544082  -0.704662   \n",
              "price            -0.083976    0.577992        0.324973   0.577816   0.682920   \n",
              "carcompany        0.096025   -0.041645        0.052188   0.006009   0.053227   \n",
              "\n",
              "                  ...  fuelsystem  boreratio    stroke  compressionratio  \\\n",
              "symboling         ...    0.091163  -0.130051 -0.008735         -0.178515   \n",
              "CarName           ...    0.123845   0.188598 -0.181775          0.101730   \n",
              "fueltype          ...    0.041529  -0.054451 -0.241829         -0.984356   \n",
              "aspiration        ...    0.288086   0.212614  0.222982          0.295541   \n",
              "doornumber        ...    0.015519  -0.119258  0.011082         -0.177888   \n",
              "carbody           ...   -0.065079   0.010549 -0.015325          0.136243   \n",
              "drivewheel        ...    0.424686   0.481827  0.071591          0.127479   \n",
              "enginelocation    ...    0.105971   0.185042 -0.138455         -0.019762   \n",
              "wheelbase         ...    0.384601   0.488750  0.160959          0.249786   \n",
              "carlength         ...    0.557810   0.606454  0.129533          0.158414   \n",
              "carwidth          ...    0.521434   0.559150  0.182942          0.181129   \n",
              "carheight         ...    0.017046   0.171071 -0.055307          0.261214   \n",
              "curbweight        ...    0.611642   0.648480  0.168790          0.151362   \n",
              "enginetype        ...   -0.091787   0.029355 -0.141918         -0.071873   \n",
              "cylindernumber    ...    0.011970  -0.032844 -0.050088         -0.064701   \n",
              "enginesize        ...    0.514070   0.583774  0.203129          0.028971   \n",
              "fuelsystem        ...    1.000000   0.475599  0.088153         -0.100786   \n",
              "boreratio         ...    0.475599   1.000000 -0.055909          0.005197   \n",
              "stroke            ...    0.088153  -0.055909  1.000000          0.186110   \n",
              "compressionratio  ...   -0.100786   0.005197  0.186110          1.000000   \n",
              "horsepower        ...    0.655638   0.573677  0.080940         -0.204326   \n",
              "peakrpm           ...    0.014261  -0.254976 -0.067964         -0.435741   \n",
              "citympg           ...   -0.671581  -0.584532 -0.042145          0.324701   \n",
              "highwaympg        ...   -0.645659  -0.587012 -0.043931          0.265201   \n",
              "price             ...    0.526823   0.553173  0.079443          0.067984   \n",
              "carcompany        ...    0.138105   0.199395 -0.202581          0.095275   \n",
              "\n",
              "                  horsepower   peakrpm   citympg  highwaympg     price  \\\n",
              "symboling           0.070873  0.273606 -0.035823    0.034606 -0.079978   \n",
              "CarName            -0.092131 -0.138309  0.093437    0.102895 -0.231439   \n",
              "fueltype            0.163926  0.476883 -0.255963   -0.191392 -0.105679   \n",
              "aspiration          0.241685 -0.183383 -0.202362   -0.254416  0.177926   \n",
              "doornumber          0.126947  0.247668  0.012417    0.036330 -0.031835   \n",
              "carbody            -0.153928 -0.109643  0.031697   -0.007170 -0.083976   \n",
              "drivewheel          0.518686 -0.039417 -0.449581   -0.452220  0.577992   \n",
              "enginelocation      0.317839  0.198461 -0.153487   -0.102026  0.324973   \n",
              "wheelbase           0.353294 -0.360469 -0.470414   -0.544082  0.577816   \n",
              "carlength           0.552623 -0.287242 -0.670909   -0.704662  0.682920   \n",
              "carwidth            0.640732 -0.220012 -0.642704   -0.677218  0.759325   \n",
              "carheight          -0.108802 -0.320411 -0.048640   -0.107358  0.119336   \n",
              "curbweight          0.750739 -0.266243 -0.757414   -0.797465  0.835305   \n",
              "enginetype          0.010301  0.005599 -0.085004   -0.078456  0.049171   \n",
              "cylindernumber      0.115612  0.222731 -0.126422   -0.085897 -0.027628   \n",
              "enginesize          0.809769 -0.244660 -0.653658   -0.677470  0.874145   \n",
              "fuelsystem          0.655638  0.014261 -0.671581   -0.645659  0.526823   \n",
              "boreratio           0.573677 -0.254976 -0.584532   -0.587012  0.553173   \n",
              "stroke              0.080940 -0.067964 -0.042145   -0.043931  0.079443   \n",
              "compressionratio   -0.204326 -0.435741  0.324701    0.265201  0.067984   \n",
              "horsepower          1.000000  0.131073 -0.801456   -0.770544  0.808139   \n",
              "peakrpm             0.131073  1.000000 -0.113544   -0.054275 -0.085267   \n",
              "citympg            -0.801456 -0.113544  1.000000    0.971337 -0.685751   \n",
              "highwaympg         -0.770544 -0.054275  0.971337    1.000000 -0.697599   \n",
              "price               0.808139 -0.085267 -0.685751   -0.697599  1.000000   \n",
              "carcompany         -0.089892 -0.138929  0.083559    0.095350 -0.231594   \n",
              "\n",
              "                  carcompany  \n",
              "symboling          -0.091524  \n",
              "CarName             0.995209  \n",
              "fueltype           -0.063029  \n",
              "aspiration          0.021522  \n",
              "doornumber         -0.164705  \n",
              "carbody             0.096025  \n",
              "drivewheel         -0.041645  \n",
              "enginelocation      0.052188  \n",
              "wheelbase           0.006009  \n",
              "carlength           0.053227  \n",
              "carwidth           -0.074974  \n",
              "carheight           0.198579  \n",
              "curbweight         -0.053644  \n",
              "enginetype         -0.074119  \n",
              "cylindernumber      0.049168  \n",
              "enginesize         -0.159540  \n",
              "fuelsystem          0.138105  \n",
              "boreratio           0.199395  \n",
              "stroke             -0.202581  \n",
              "compressionratio    0.095275  \n",
              "horsepower         -0.089892  \n",
              "peakrpm            -0.138929  \n",
              "citympg             0.083559  \n",
              "highwaympg          0.095350  \n",
              "price              -0.231594  \n",
              "carcompany          1.000000  \n",
              "\n",
              "[26 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1398ee52-1b8d-408c-a0b2-8c2bc359599d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>symboling</th>\n",
              "      <th>CarName</th>\n",
              "      <th>fueltype</th>\n",
              "      <th>aspiration</th>\n",
              "      <th>doornumber</th>\n",
              "      <th>carbody</th>\n",
              "      <th>drivewheel</th>\n",
              "      <th>enginelocation</th>\n",
              "      <th>wheelbase</th>\n",
              "      <th>carlength</th>\n",
              "      <th>...</th>\n",
              "      <th>fuelsystem</th>\n",
              "      <th>boreratio</th>\n",
              "      <th>stroke</th>\n",
              "      <th>compressionratio</th>\n",
              "      <th>horsepower</th>\n",
              "      <th>peakrpm</th>\n",
              "      <th>citympg</th>\n",
              "      <th>highwaympg</th>\n",
              "      <th>price</th>\n",
              "      <th>carcompany</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>symboling</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.107095</td>\n",
              "      <td>0.194311</td>\n",
              "      <td>-0.059866</td>\n",
              "      <td>0.664073</td>\n",
              "      <td>-0.596135</td>\n",
              "      <td>-0.041671</td>\n",
              "      <td>0.212471</td>\n",
              "      <td>-0.531954</td>\n",
              "      <td>-0.357612</td>\n",
              "      <td>...</td>\n",
              "      <td>0.091163</td>\n",
              "      <td>-0.130051</td>\n",
              "      <td>-0.008735</td>\n",
              "      <td>-0.178515</td>\n",
              "      <td>0.070873</td>\n",
              "      <td>0.273606</td>\n",
              "      <td>-0.035823</td>\n",
              "      <td>0.034606</td>\n",
              "      <td>-0.079978</td>\n",
              "      <td>-0.091524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CarName</th>\n",
              "      <td>-0.107095</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.069435</td>\n",
              "      <td>0.019914</td>\n",
              "      <td>-0.171745</td>\n",
              "      <td>0.099691</td>\n",
              "      <td>-0.016129</td>\n",
              "      <td>0.055968</td>\n",
              "      <td>0.014550</td>\n",
              "      <td>0.053016</td>\n",
              "      <td>...</td>\n",
              "      <td>0.123845</td>\n",
              "      <td>0.188598</td>\n",
              "      <td>-0.181775</td>\n",
              "      <td>0.101730</td>\n",
              "      <td>-0.092131</td>\n",
              "      <td>-0.138309</td>\n",
              "      <td>0.093437</td>\n",
              "      <td>0.102895</td>\n",
              "      <td>-0.231439</td>\n",
              "      <td>0.995209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fueltype</th>\n",
              "      <td>0.194311</td>\n",
              "      <td>-0.069435</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.401397</td>\n",
              "      <td>0.191491</td>\n",
              "      <td>-0.147853</td>\n",
              "      <td>-0.132257</td>\n",
              "      <td>0.040070</td>\n",
              "      <td>-0.308346</td>\n",
              "      <td>-0.212679</td>\n",
              "      <td>...</td>\n",
              "      <td>0.041529</td>\n",
              "      <td>-0.054451</td>\n",
              "      <td>-0.241829</td>\n",
              "      <td>-0.984356</td>\n",
              "      <td>0.163926</td>\n",
              "      <td>0.476883</td>\n",
              "      <td>-0.255963</td>\n",
              "      <td>-0.191392</td>\n",
              "      <td>-0.105679</td>\n",
              "      <td>-0.063029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aspiration</th>\n",
              "      <td>-0.059866</td>\n",
              "      <td>0.019914</td>\n",
              "      <td>-0.401397</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.031792</td>\n",
              "      <td>0.063028</td>\n",
              "      <td>0.066465</td>\n",
              "      <td>-0.057191</td>\n",
              "      <td>0.257611</td>\n",
              "      <td>0.234539</td>\n",
              "      <td>...</td>\n",
              "      <td>0.288086</td>\n",
              "      <td>0.212614</td>\n",
              "      <td>0.222982</td>\n",
              "      <td>0.295541</td>\n",
              "      <td>0.241685</td>\n",
              "      <td>-0.183383</td>\n",
              "      <td>-0.202362</td>\n",
              "      <td>-0.254416</td>\n",
              "      <td>0.177926</td>\n",
              "      <td>0.021522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>doornumber</th>\n",
              "      <td>0.664073</td>\n",
              "      <td>-0.171745</td>\n",
              "      <td>0.191491</td>\n",
              "      <td>-0.031792</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.680358</td>\n",
              "      <td>0.098954</td>\n",
              "      <td>0.137757</td>\n",
              "      <td>-0.447357</td>\n",
              "      <td>-0.398568</td>\n",
              "      <td>...</td>\n",
              "      <td>0.015519</td>\n",
              "      <td>-0.119258</td>\n",
              "      <td>0.011082</td>\n",
              "      <td>-0.177888</td>\n",
              "      <td>0.126947</td>\n",
              "      <td>0.247668</td>\n",
              "      <td>0.012417</td>\n",
              "      <td>0.036330</td>\n",
              "      <td>-0.031835</td>\n",
              "      <td>-0.164705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carbody</th>\n",
              "      <td>-0.596135</td>\n",
              "      <td>0.099691</td>\n",
              "      <td>-0.147853</td>\n",
              "      <td>0.063028</td>\n",
              "      <td>-0.680358</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.155745</td>\n",
              "      <td>-0.277009</td>\n",
              "      <td>0.401362</td>\n",
              "      <td>0.334433</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.065079</td>\n",
              "      <td>0.010549</td>\n",
              "      <td>-0.015325</td>\n",
              "      <td>0.136243</td>\n",
              "      <td>-0.153928</td>\n",
              "      <td>-0.109643</td>\n",
              "      <td>0.031697</td>\n",
              "      <td>-0.007170</td>\n",
              "      <td>-0.083976</td>\n",
              "      <td>0.096025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>drivewheel</th>\n",
              "      <td>-0.041671</td>\n",
              "      <td>-0.016129</td>\n",
              "      <td>-0.132257</td>\n",
              "      <td>0.066465</td>\n",
              "      <td>0.098954</td>\n",
              "      <td>-0.155745</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.147865</td>\n",
              "      <td>0.459745</td>\n",
              "      <td>0.485649</td>\n",
              "      <td>...</td>\n",
              "      <td>0.424686</td>\n",
              "      <td>0.481827</td>\n",
              "      <td>0.071591</td>\n",
              "      <td>0.127479</td>\n",
              "      <td>0.518686</td>\n",
              "      <td>-0.039417</td>\n",
              "      <td>-0.449581</td>\n",
              "      <td>-0.452220</td>\n",
              "      <td>0.577992</td>\n",
              "      <td>-0.041645</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enginelocation</th>\n",
              "      <td>0.212471</td>\n",
              "      <td>0.055968</td>\n",
              "      <td>0.040070</td>\n",
              "      <td>-0.057191</td>\n",
              "      <td>0.137757</td>\n",
              "      <td>-0.277009</td>\n",
              "      <td>0.147865</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.187790</td>\n",
              "      <td>-0.050989</td>\n",
              "      <td>...</td>\n",
              "      <td>0.105971</td>\n",
              "      <td>0.185042</td>\n",
              "      <td>-0.138455</td>\n",
              "      <td>-0.019762</td>\n",
              "      <td>0.317839</td>\n",
              "      <td>0.198461</td>\n",
              "      <td>-0.153487</td>\n",
              "      <td>-0.102026</td>\n",
              "      <td>0.324973</td>\n",
              "      <td>0.052188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wheelbase</th>\n",
              "      <td>-0.531954</td>\n",
              "      <td>0.014550</td>\n",
              "      <td>-0.308346</td>\n",
              "      <td>0.257611</td>\n",
              "      <td>-0.447357</td>\n",
              "      <td>0.401362</td>\n",
              "      <td>0.459745</td>\n",
              "      <td>-0.187790</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.874587</td>\n",
              "      <td>...</td>\n",
              "      <td>0.384601</td>\n",
              "      <td>0.488750</td>\n",
              "      <td>0.160959</td>\n",
              "      <td>0.249786</td>\n",
              "      <td>0.353294</td>\n",
              "      <td>-0.360469</td>\n",
              "      <td>-0.470414</td>\n",
              "      <td>-0.544082</td>\n",
              "      <td>0.577816</td>\n",
              "      <td>0.006009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carlength</th>\n",
              "      <td>-0.357612</td>\n",
              "      <td>0.053016</td>\n",
              "      <td>-0.212679</td>\n",
              "      <td>0.234539</td>\n",
              "      <td>-0.398568</td>\n",
              "      <td>0.334433</td>\n",
              "      <td>0.485649</td>\n",
              "      <td>-0.050989</td>\n",
              "      <td>0.874587</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.557810</td>\n",
              "      <td>0.606454</td>\n",
              "      <td>0.129533</td>\n",
              "      <td>0.158414</td>\n",
              "      <td>0.552623</td>\n",
              "      <td>-0.287242</td>\n",
              "      <td>-0.670909</td>\n",
              "      <td>-0.704662</td>\n",
              "      <td>0.682920</td>\n",
              "      <td>0.053227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carwidth</th>\n",
              "      <td>-0.232919</td>\n",
              "      <td>-0.075349</td>\n",
              "      <td>-0.233880</td>\n",
              "      <td>0.300567</td>\n",
              "      <td>-0.207168</td>\n",
              "      <td>0.131710</td>\n",
              "      <td>0.470751</td>\n",
              "      <td>-0.051698</td>\n",
              "      <td>0.795144</td>\n",
              "      <td>0.841118</td>\n",
              "      <td>...</td>\n",
              "      <td>0.521434</td>\n",
              "      <td>0.559150</td>\n",
              "      <td>0.182942</td>\n",
              "      <td>0.181129</td>\n",
              "      <td>0.640732</td>\n",
              "      <td>-0.220012</td>\n",
              "      <td>-0.642704</td>\n",
              "      <td>-0.677218</td>\n",
              "      <td>0.759325</td>\n",
              "      <td>-0.074974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carheight</th>\n",
              "      <td>-0.541038</td>\n",
              "      <td>0.201900</td>\n",
              "      <td>-0.284631</td>\n",
              "      <td>0.087311</td>\n",
              "      <td>-0.552208</td>\n",
              "      <td>0.568534</td>\n",
              "      <td>-0.019719</td>\n",
              "      <td>-0.106234</td>\n",
              "      <td>0.589435</td>\n",
              "      <td>0.491029</td>\n",
              "      <td>...</td>\n",
              "      <td>0.017046</td>\n",
              "      <td>0.171071</td>\n",
              "      <td>-0.055307</td>\n",
              "      <td>0.261214</td>\n",
              "      <td>-0.108802</td>\n",
              "      <td>-0.320411</td>\n",
              "      <td>-0.048640</td>\n",
              "      <td>-0.107358</td>\n",
              "      <td>0.119336</td>\n",
              "      <td>0.198579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>curbweight</th>\n",
              "      <td>-0.227691</td>\n",
              "      <td>-0.049407</td>\n",
              "      <td>-0.217275</td>\n",
              "      <td>0.324902</td>\n",
              "      <td>-0.197379</td>\n",
              "      <td>0.128467</td>\n",
              "      <td>0.575111</td>\n",
              "      <td>0.050468</td>\n",
              "      <td>0.776386</td>\n",
              "      <td>0.877728</td>\n",
              "      <td>...</td>\n",
              "      <td>0.611642</td>\n",
              "      <td>0.648480</td>\n",
              "      <td>0.168790</td>\n",
              "      <td>0.151362</td>\n",
              "      <td>0.750739</td>\n",
              "      <td>-0.266243</td>\n",
              "      <td>-0.757414</td>\n",
              "      <td>-0.797465</td>\n",
              "      <td>0.835305</td>\n",
              "      <td>-0.053644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enginetype</th>\n",
              "      <td>0.050372</td>\n",
              "      <td>-0.090381</td>\n",
              "      <td>0.082695</td>\n",
              "      <td>-0.102963</td>\n",
              "      <td>0.062431</td>\n",
              "      <td>-0.037024</td>\n",
              "      <td>-0.116823</td>\n",
              "      <td>0.114127</td>\n",
              "      <td>-0.135577</td>\n",
              "      <td>-0.113291</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.091787</td>\n",
              "      <td>0.029355</td>\n",
              "      <td>-0.141918</td>\n",
              "      <td>-0.071873</td>\n",
              "      <td>0.010301</td>\n",
              "      <td>0.005599</td>\n",
              "      <td>-0.085004</td>\n",
              "      <td>-0.078456</td>\n",
              "      <td>0.049171</td>\n",
              "      <td>-0.074119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cylindernumber</th>\n",
              "      <td>0.197762</td>\n",
              "      <td>0.047154</td>\n",
              "      <td>0.110617</td>\n",
              "      <td>-0.133119</td>\n",
              "      <td>0.154322</td>\n",
              "      <td>-0.048408</td>\n",
              "      <td>0.223238</td>\n",
              "      <td>0.135541</td>\n",
              "      <td>-0.184596</td>\n",
              "      <td>-0.109585</td>\n",
              "      <td>...</td>\n",
              "      <td>0.011970</td>\n",
              "      <td>-0.032844</td>\n",
              "      <td>-0.050088</td>\n",
              "      <td>-0.064701</td>\n",
              "      <td>0.115612</td>\n",
              "      <td>0.222731</td>\n",
              "      <td>-0.126422</td>\n",
              "      <td>-0.085897</td>\n",
              "      <td>-0.027628</td>\n",
              "      <td>0.049168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enginesize</th>\n",
              "      <td>-0.105790</td>\n",
              "      <td>-0.153982</td>\n",
              "      <td>-0.069594</td>\n",
              "      <td>0.108217</td>\n",
              "      <td>-0.020742</td>\n",
              "      <td>-0.073352</td>\n",
              "      <td>0.524307</td>\n",
              "      <td>0.196826</td>\n",
              "      <td>0.569329</td>\n",
              "      <td>0.683360</td>\n",
              "      <td>...</td>\n",
              "      <td>0.514070</td>\n",
              "      <td>0.583774</td>\n",
              "      <td>0.203129</td>\n",
              "      <td>0.028971</td>\n",
              "      <td>0.809769</td>\n",
              "      <td>-0.244660</td>\n",
              "      <td>-0.653658</td>\n",
              "      <td>-0.677470</td>\n",
              "      <td>0.874145</td>\n",
              "      <td>-0.159540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fuelsystem</th>\n",
              "      <td>0.091163</td>\n",
              "      <td>0.123845</td>\n",
              "      <td>0.041529</td>\n",
              "      <td>0.288086</td>\n",
              "      <td>0.015519</td>\n",
              "      <td>-0.065079</td>\n",
              "      <td>0.424686</td>\n",
              "      <td>0.105971</td>\n",
              "      <td>0.384601</td>\n",
              "      <td>0.557810</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.475599</td>\n",
              "      <td>0.088153</td>\n",
              "      <td>-0.100786</td>\n",
              "      <td>0.655638</td>\n",
              "      <td>0.014261</td>\n",
              "      <td>-0.671581</td>\n",
              "      <td>-0.645659</td>\n",
              "      <td>0.526823</td>\n",
              "      <td>0.138105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>boreratio</th>\n",
              "      <td>-0.130051</td>\n",
              "      <td>0.188598</td>\n",
              "      <td>-0.054451</td>\n",
              "      <td>0.212614</td>\n",
              "      <td>-0.119258</td>\n",
              "      <td>0.010549</td>\n",
              "      <td>0.481827</td>\n",
              "      <td>0.185042</td>\n",
              "      <td>0.488750</td>\n",
              "      <td>0.606454</td>\n",
              "      <td>...</td>\n",
              "      <td>0.475599</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.055909</td>\n",
              "      <td>0.005197</td>\n",
              "      <td>0.573677</td>\n",
              "      <td>-0.254976</td>\n",
              "      <td>-0.584532</td>\n",
              "      <td>-0.587012</td>\n",
              "      <td>0.553173</td>\n",
              "      <td>0.199395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stroke</th>\n",
              "      <td>-0.008735</td>\n",
              "      <td>-0.181775</td>\n",
              "      <td>-0.241829</td>\n",
              "      <td>0.222982</td>\n",
              "      <td>0.011082</td>\n",
              "      <td>-0.015325</td>\n",
              "      <td>0.071591</td>\n",
              "      <td>-0.138455</td>\n",
              "      <td>0.160959</td>\n",
              "      <td>0.129533</td>\n",
              "      <td>...</td>\n",
              "      <td>0.088153</td>\n",
              "      <td>-0.055909</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.186110</td>\n",
              "      <td>0.080940</td>\n",
              "      <td>-0.067964</td>\n",
              "      <td>-0.042145</td>\n",
              "      <td>-0.043931</td>\n",
              "      <td>0.079443</td>\n",
              "      <td>-0.202581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>compressionratio</th>\n",
              "      <td>-0.178515</td>\n",
              "      <td>0.101730</td>\n",
              "      <td>-0.984356</td>\n",
              "      <td>0.295541</td>\n",
              "      <td>-0.177888</td>\n",
              "      <td>0.136243</td>\n",
              "      <td>0.127479</td>\n",
              "      <td>-0.019762</td>\n",
              "      <td>0.249786</td>\n",
              "      <td>0.158414</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.100786</td>\n",
              "      <td>0.005197</td>\n",
              "      <td>0.186110</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.204326</td>\n",
              "      <td>-0.435741</td>\n",
              "      <td>0.324701</td>\n",
              "      <td>0.265201</td>\n",
              "      <td>0.067984</td>\n",
              "      <td>0.095275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horsepower</th>\n",
              "      <td>0.070873</td>\n",
              "      <td>-0.092131</td>\n",
              "      <td>0.163926</td>\n",
              "      <td>0.241685</td>\n",
              "      <td>0.126947</td>\n",
              "      <td>-0.153928</td>\n",
              "      <td>0.518686</td>\n",
              "      <td>0.317839</td>\n",
              "      <td>0.353294</td>\n",
              "      <td>0.552623</td>\n",
              "      <td>...</td>\n",
              "      <td>0.655638</td>\n",
              "      <td>0.573677</td>\n",
              "      <td>0.080940</td>\n",
              "      <td>-0.204326</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.131073</td>\n",
              "      <td>-0.801456</td>\n",
              "      <td>-0.770544</td>\n",
              "      <td>0.808139</td>\n",
              "      <td>-0.089892</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>peakrpm</th>\n",
              "      <td>0.273606</td>\n",
              "      <td>-0.138309</td>\n",
              "      <td>0.476883</td>\n",
              "      <td>-0.183383</td>\n",
              "      <td>0.247668</td>\n",
              "      <td>-0.109643</td>\n",
              "      <td>-0.039417</td>\n",
              "      <td>0.198461</td>\n",
              "      <td>-0.360469</td>\n",
              "      <td>-0.287242</td>\n",
              "      <td>...</td>\n",
              "      <td>0.014261</td>\n",
              "      <td>-0.254976</td>\n",
              "      <td>-0.067964</td>\n",
              "      <td>-0.435741</td>\n",
              "      <td>0.131073</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.113544</td>\n",
              "      <td>-0.054275</td>\n",
              "      <td>-0.085267</td>\n",
              "      <td>-0.138929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>citympg</th>\n",
              "      <td>-0.035823</td>\n",
              "      <td>0.093437</td>\n",
              "      <td>-0.255963</td>\n",
              "      <td>-0.202362</td>\n",
              "      <td>0.012417</td>\n",
              "      <td>0.031697</td>\n",
              "      <td>-0.449581</td>\n",
              "      <td>-0.153487</td>\n",
              "      <td>-0.470414</td>\n",
              "      <td>-0.670909</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.671581</td>\n",
              "      <td>-0.584532</td>\n",
              "      <td>-0.042145</td>\n",
              "      <td>0.324701</td>\n",
              "      <td>-0.801456</td>\n",
              "      <td>-0.113544</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.971337</td>\n",
              "      <td>-0.685751</td>\n",
              "      <td>0.083559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>highwaympg</th>\n",
              "      <td>0.034606</td>\n",
              "      <td>0.102895</td>\n",
              "      <td>-0.191392</td>\n",
              "      <td>-0.254416</td>\n",
              "      <td>0.036330</td>\n",
              "      <td>-0.007170</td>\n",
              "      <td>-0.452220</td>\n",
              "      <td>-0.102026</td>\n",
              "      <td>-0.544082</td>\n",
              "      <td>-0.704662</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.645659</td>\n",
              "      <td>-0.587012</td>\n",
              "      <td>-0.043931</td>\n",
              "      <td>0.265201</td>\n",
              "      <td>-0.770544</td>\n",
              "      <td>-0.054275</td>\n",
              "      <td>0.971337</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.697599</td>\n",
              "      <td>0.095350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>price</th>\n",
              "      <td>-0.079978</td>\n",
              "      <td>-0.231439</td>\n",
              "      <td>-0.105679</td>\n",
              "      <td>0.177926</td>\n",
              "      <td>-0.031835</td>\n",
              "      <td>-0.083976</td>\n",
              "      <td>0.577992</td>\n",
              "      <td>0.324973</td>\n",
              "      <td>0.577816</td>\n",
              "      <td>0.682920</td>\n",
              "      <td>...</td>\n",
              "      <td>0.526823</td>\n",
              "      <td>0.553173</td>\n",
              "      <td>0.079443</td>\n",
              "      <td>0.067984</td>\n",
              "      <td>0.808139</td>\n",
              "      <td>-0.085267</td>\n",
              "      <td>-0.685751</td>\n",
              "      <td>-0.697599</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.231594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carcompany</th>\n",
              "      <td>-0.091524</td>\n",
              "      <td>0.995209</td>\n",
              "      <td>-0.063029</td>\n",
              "      <td>0.021522</td>\n",
              "      <td>-0.164705</td>\n",
              "      <td>0.096025</td>\n",
              "      <td>-0.041645</td>\n",
              "      <td>0.052188</td>\n",
              "      <td>0.006009</td>\n",
              "      <td>0.053227</td>\n",
              "      <td>...</td>\n",
              "      <td>0.138105</td>\n",
              "      <td>0.199395</td>\n",
              "      <td>-0.202581</td>\n",
              "      <td>0.095275</td>\n",
              "      <td>-0.089892</td>\n",
              "      <td>-0.138929</td>\n",
              "      <td>0.083559</td>\n",
              "      <td>0.095350</td>\n",
              "      <td>-0.231594</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>26 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1398ee52-1b8d-408c-a0b2-8c2bc359599d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1398ee52-1b8d-408c-a0b2-8c2bc359599d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1398ee52-1b8d-408c-a0b2-8c2bc359599d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6c704b70-4642-49a0-b0ed-61529451ceaa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c704b70-4642-49a0-b0ed-61529451ceaa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6c704b70-4642-49a0-b0ed-61529451ceaa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cor_matrix=np.array(df.corr())\n",
        "for i in range(26):\n",
        "    for j in range(26):\n",
        "        if(np.abs(cor_matrix[i][j])>=0.85 and np.abs(cor_matrix[i][j])<1 ):\n",
        "            print(f\"{df.columns[i]} ----co-related-----{df.columns[j]}----{cor_matrix[i][j]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VH8-Zu_pMV6o",
        "outputId": "3bb40f75-d6cf-4e03-8248-6d2e5b549a71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CarName ----co-related-----carcompany----0.9952093509027167\n",
            "fueltype ----co-related-----compressionratio-----0.9843560568767543\n",
            "wheelbase ----co-related-----carlength----0.874587475964264\n",
            "carlength ----co-related-----wheelbase----0.874587475964264\n",
            "carlength ----co-related-----curbweight----0.8777284608306433\n",
            "carwidth ----co-related-----curbweight----0.8670324646791233\n",
            "curbweight ----co-related-----carlength----0.8777284608306433\n",
            "curbweight ----co-related-----carwidth----0.8670324646791233\n",
            "curbweight ----co-related-----enginesize----0.850594073426277\n",
            "enginesize ----co-related-----curbweight----0.850594073426277\n",
            "enginesize ----co-related-----price----0.8741448025245117\n",
            "compressionratio ----co-related-----fueltype-----0.9843560568767543\n",
            "citympg ----co-related-----highwaympg----0.9713370423425045\n",
            "highwaympg ----co-related-----citympg----0.9713370423425045\n",
            "price ----co-related-----enginesize----0.8741448025245117\n",
            "carcompany ----co-related-----CarName----0.9952093509027167\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(['CarName','fueltype','citympg','curbweight'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "QtMkUZI-MbAa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yxVeunqiMeFM",
        "outputId": "d585cf83-0998-4c3b-84b5-451d19d7fcf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "symboling             int64\n",
              "aspiration             int8\n",
              "doornumber             int8\n",
              "carbody                int8\n",
              "drivewheel             int8\n",
              "enginelocation         int8\n",
              "wheelbase           float64\n",
              "carlength           float64\n",
              "carwidth            float64\n",
              "carheight           float64\n",
              "enginetype             int8\n",
              "cylindernumber         int8\n",
              "enginesize            int64\n",
              "fuelsystem             int8\n",
              "boreratio           float64\n",
              "stroke              float64\n",
              "compressionratio    float64\n",
              "horsepower            int64\n",
              "peakrpm               int64\n",
              "highwaympg            int64\n",
              "price               float64\n",
              "carcompany             int8\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_val=df.drop([\"price\"],axis=1) # MODEL BUILDING\n",
        "y_val=df[\"price\"]"
      ],
      "metadata": {
        "id": "y2cW6iydMgs1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(x_val,y_val,train_size=0.8)\n",
        "model=LinearRegression()\n",
        "model.fit(x_train,y_train)\n",
        "\n",
        "y_pred=model.predict(x_test)\n",
        "rmse=np.sqrt(mean_squared_error(y_test,y_pred))\n",
        "ac=model.score(x_test,y_test)"
      ],
      "metadata": {
        "id": "uMu3JfyOMk93"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"The accuracy of the model is {round(ac*100,2)}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m3XRL5DlMpx5",
        "outputId": "f562f477-4b7a-4c20-b4ba-1f7a475101b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy of the model is 80.77%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def accuracy_generator(x_val,y_val,split=0.7):\n",
        "    x_train,x_test,y_train,y_test=train_test_split(x_val,y_val,train_size=split)\n",
        "    model=LinearRegression()\n",
        "    model.fit(x_train,y_train)\n",
        "    y_pred=model.predict(x_test)\n",
        "    rmse=np.sqrt(mean_squared_error(y_test,y_pred))\n",
        "    ac=model.score(x_test,y_test)\n",
        "\n",
        "    return rmse,ac"
      ],
      "metadata": {
        "id": "rQrlTItRMrhz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr_rmse=[]\n",
        "arr_ac=[]\n",
        "for i in range(15):\n",
        "    rmse,ac=accuracy_generator(x_val,y_val,split=.85)\n",
        "    arr_rmse.append(rmse)\n",
        "    arr_ac.append(ac)\n",
        "\n",
        "print(f\"The average rmse is {round(np.average(arr_rmse),2)}\")\n",
        "print(f\"The accuracy of the model is {round(np.average(arr_ac)*100,2)}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H_GZ7jmFMvi9",
        "outputId": "e16dbf28-c27c-4f2f-cc3e-d386afabdcbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The average rmse is 2966.42\n",
            "The accuracy of the model is 86.48%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with plt.style.context(('ggplot')):\n",
        "    plt.figure(figsize=(15,7))\n",
        "    plt.plot(x_val.columns[:10],model.coef_[:10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "5LFpRLlJMz2H",
        "outputId": "1bb51791-5f3a-46a3-cd9b-84ca7faecacc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}